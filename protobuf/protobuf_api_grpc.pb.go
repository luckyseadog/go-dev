// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: protobuf/protobuf_api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsCollect_AddMetrics_FullMethodName = "/protobuf_api.MetricsCollect/AddMetrics"
)

// MetricsCollectClient is the client API for MetricsCollect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsCollectClient interface {
	AddMetrics(ctx context.Context, in *AddMetricsRequest, opts ...grpc.CallOption) (*AddMetricsResponse, error)
}

type metricsCollectClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsCollectClient(cc grpc.ClientConnInterface) MetricsCollectClient {
	return &metricsCollectClient{cc}
}

func (c *metricsCollectClient) AddMetrics(ctx context.Context, in *AddMetricsRequest, opts ...grpc.CallOption) (*AddMetricsResponse, error) {
	out := new(AddMetricsResponse)
	err := c.cc.Invoke(ctx, MetricsCollect_AddMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsCollectServer is the server API for MetricsCollect service.
// All implementations must embed UnimplementedMetricsCollectServer
// for forward compatibility
type MetricsCollectServer interface {
	AddMetrics(context.Context, *AddMetricsRequest) (*AddMetricsResponse, error)
	mustEmbedUnimplementedMetricsCollectServer()
}

// UnimplementedMetricsCollectServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsCollectServer struct {
}

func (UnimplementedMetricsCollectServer) AddMetrics(context.Context, *AddMetricsRequest) (*AddMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetrics not implemented")
}
func (UnimplementedMetricsCollectServer) mustEmbedUnimplementedMetricsCollectServer() {}

// UnsafeMetricsCollectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsCollectServer will
// result in compilation errors.
type UnsafeMetricsCollectServer interface {
	mustEmbedUnimplementedMetricsCollectServer()
}

func RegisterMetricsCollectServer(s grpc.ServiceRegistrar, srv MetricsCollectServer) {
	s.RegisterService(&MetricsCollect_ServiceDesc, srv)
}

func _MetricsCollect_AddMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsCollectServer).AddMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsCollect_AddMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsCollectServer).AddMetrics(ctx, req.(*AddMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsCollect_ServiceDesc is the grpc.ServiceDesc for MetricsCollect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsCollect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf_api.MetricsCollect",
	HandlerType: (*MetricsCollectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMetrics",
			Handler:    _MetricsCollect_AddMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/protobuf_api.proto",
}
